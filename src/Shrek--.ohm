Shrek {
  Program
    = (ListOf<Summons,";"> ";")? ListOf<Statement,";"> ";"?
    
  Summons =  summon ("{" ListOf<id,","> "}" from)? stringLiteral
   
  Statement = Operation
    | Object
    
 Object = id "." (objectKeyword | id) List?	--member
    | DataType
    | Call
    | Exp
    | stringLiteral
    | id
 
 Operation = Conditional
    | UntilLoop
    | return Statement --return
    | Declaration
    | Assignment
 
  DataType = Ogre
  	| List
    | stringLiteral
   
  Ogre = ogre List? Block
  
  Conditional = whitevur Object Block (otherwise Object Block)* (else Block)?
  
  UntilLoop = until ("(" Statement? ")") Conditional? Block
  
  Block = "{" Program "}"
      
  List = "(" ListComprehension ")" --ListComprehension 
  	| "("  ListOf<Prop,","> ")"	--List
    
  Prop = ((id ":")? Statement)
  
  ListComprehension = List Block fur Object
   
  Assignment = id ("~"|"->") Object	--byValue

  Declaration = (enchanted | cursed)? typeExp id (("~" |"->") Object)?	--assignment
  	
   
  Call = id List
   
  id = ~keyword letter(letter | digit | "_")*
   
  stringLiteral = "\"" (~"\"" any)* "\""

  Exp       = ("-" | "!") Exp7                        -- unary
            | Exp1 "?" Exp1 ":" Exp                   -- ternary
            | Exp1
  Exp1      = Exp1 "||" Exp2                          -- binary
            | Exp2
  Exp2      = Exp2 "&&" Exp3                          -- binary
            | Exp3
  Exp3      = Exp4 ("<="|"<"|"=="|"!="|">="|">") Exp4 -- binary
            | Exp4
  Exp4      = Exp4 ("+" | "-") Exp5                   -- binary
            | Exp5
  Exp5      = Exp5 ("*" | "/" | "%") Exp6             -- binary
            | Exp6
  Exp6      = Exp7 "**" Exp6                          -- binary
            | Exp7
  Exp7      = num
            | truth
            | lie
            | Call
            | id                                      -- id
            | "(" Exp ")"                             -- parens


  num = digit* "." digit+  -- fract
    | digit+             -- whole
   
  keyword = ogre
  	| truth
    | lie
    | else
    | whitevur
    | otherwise
    | until
    | theEnd
    | fur
    | tau
    | return
  
  ogre = "ogre"
  
  truth = "truth"
  
  lie = "lie"
  
  until = "until"
  
  else = "else"
  
  theEnd = "theEnd"
  
  whitevur = "whitevur"
  
  enchanted = "enchanted"
  
  otherwise = "otherwise"
  
  fur = "fur"
  
  cursed = "cursed"

  tau = "tau"
  
  return = "return"
  
  summon = "summon"
  
  from = "from"
  
  objectKeyword = sing
  	| typeProp
    | value
    
  sing = "sing"
  
  typeProp = "type"
  
  value = "value"
  
  typeExp = typeExp ("+"|"-") type	--binary
  	| type
  
  type = shilling
    | ogreType
  	| pinoccio
    | anyType
    
  shilling="Shilling"
  
  pinoccio ="Pinoccio"
  
  ogreType = "Ogre"
  
  anyType = "Any"
  
  space    += "\\" (~"\n" any)* "\n"?	--comment
  }