Shrek {
  Program
    = Statement (";"  Statement)* ";"?
   
  Statement = Declaration
    | Assignment
    | DataType
    | Call
    | Exp
    | stringLiteral
    | id
 
  DataType = Structure
  	| List
    | stringLiteral
   
  Structure = ogre "{" Program? "}"
      
  List = "<"  (Statement+ ("," Statement)*)? ">"
   
  Assignment = id "~" (DataType | Exp)	--byValue
  	| id "->" id	--byReference
  
  Declaration = (enchanted | cursed)? id ":" (Exp | DataType)	--assignment
  	| (enchanted | cursed) id	--declare
  	
   
  Call = id "(" (Exp+ ("," Exp)*)? ")"
   
  id = ~keyword letter(letter | digit | "_")*
   
   
  stringLiteral = "\"" (~"\"" any)* "\""

  Exp       = ("-" | "!") Exp7                        -- unary
            | Exp1 "?" Exp1 ":" Exp                   -- ternary
            | Exp1
  Exp1      = Exp1 "||" Exp2                          -- binary
            | Exp2
  Exp2      = Exp2 "&&" Exp3                          -- binary
            | Exp3
  Exp3      = Exp4 ("<="|"<"|"=="|"!="|">="|">") Exp4 -- binary
            | Exp4
  Exp4      = Exp4 ("+" | "-") Exp5                   -- binary
            | Exp5
  Exp5      = Exp5 ("*" | "/" | "%") Exp6             -- binary
            | Exp6
  Exp6      = Exp7 "**" Exp6                          -- binary
            | Exp7
  Exp7      = num
            | truth
            | lie
            | Call
            | id                                      -- id
            | "(" Exp ")"                             -- parens


  num = digit* "." digit+  -- fract
    | digit+             -- whole
   
  keyword = ogre
  	| truth
    | lie
  
  ogre = "ogre"
  
  truth = "truth"
  
  lie = "lie"
  
  enchanted = "enchanted"
  
  cursed = "cursed"
  space    += "\\" (~"\n" any)* "\n"	--comment
  }
